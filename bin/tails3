#!/usr/bin/env node

var nopt = require('nopt');
var tails3 = require('../lib/tails3')
var colors = require('colors');
var strftime = require('strftime');

function oneHourAgo(){
    return new Date((new Date).getTime() - 3600000);
}

function lengthlimit(line, length){
    length = length || 160;
    if(line.length > length-3)
        line = line.substr(0, length-3) + '...';
    return line;
}

function applyColor(color, line){
    return line[color];
}

function tryPrettyPrint(line){
    var formatted;
    var parsed
    try {
        var parsed = JSON.parse(line);
        if(typeof parsed === 'string'){
            // if it was a single string, then try parsing again, in case this
            // string was doubly-json-encoded:
            try{
                parsed = JSON.parse(parsed);
            } catch(e){ }
        }
        formatted = JSON.stringify(parsed, null, '  ');
    }catch(e){
        formatted = line;
    }
    return formatted;
}

function printLine(color, isdebug, ts, line){
    var stack   = line.stack;
    var host    = line.hostname;
    var level   = line.level;
    var message = line.message;

    // default to using the line as the message, if it doesn't look like a
    // structured line
    if(message)
        message = line.message;
    else
        message = line;

    // if the message is JSON, then parse and pretty-print it:
    var formatted = tryPrettyPrint(message);


    if(stack) stack = stack.replace(/\\n/g, '\n');

    if(typeof ts === 'undefined')
        ts = 'unknown';
    else
        ts = strftime("%Y/%m/%d %H:%M:%S.%L", ts);
    
    if(typeof color === 'undefined'){
        console.log(applyColor('bold', '[' + ts +' '+ level +' '+ host + '] ') + formatted);
    }else if(isdebug){
        console.log(applyColor('bold', '[' + ts +' '+ level +' '+ host + '] ') + applyColor('grey', formatted));
    }else{
        console.log(applyColor(color, applyColor('bold', '[' + ts +' '+ level +' '+ host + '] ') + formatted));
    }
    if(stack)
        console.log(stack[color]);
}
function formatLine(line){
    var ts = line.timestamp? new Date(line.timestamp) : undefined;
    var level = line.level;
    
    if(level == 'critical'){
        printLine('magenta', false, ts, line);
    }else if(level == 'error'){
        printLine('red', false, ts, line);
    }else if(level == 'warn'){
        printLine('yellow', false, ts, line);
    }else if(level == 'debug'){
        printLine(undefined, true, ts, line);
    }else{
        printLine(undefined, false, ts, line);
    }
}


function main(){
    process.title = 'tails3';

    var opts = {
        "bucket":String,
        "stage":String,
        "since":String,
        "host":String
    };
    var shorthands = {
        "b": ["--bucket"],
        "h": ["--hodt"],
    };
    var parsed = nopt(opts, shorthands);

    if(!parsed.bucket)
        throw new Error('--bucket is required');
    if(parsed.since && parsed.since.split('-').length != 5)
        throw new Error('--since must be of the form YYYY-mm-DD-HH-MM (interpreted in local timezone)');

    var one_hour_ago_strffed = tails3.bucketDateFormat(oneHourAgo());

    var stage  = parsed.stage || 'production';
    var bucket = parsed.bucket;
    var since  = parsed.since || one_hour_ago_strffed;
    var host   = null;

    if(parsed.host){
        host = new RegExp(parsed.host);
    }
    
    var sp = since.split("-");
    var since = new Date(sp[0], sp[1]-1, sp[2], sp[3], sp[4]);

    var s = new tails3.BucketDataStream(bucket, since, stage);
    
    s.on('line', function(line){
        if(host && !host.exec(line.hostname)){
            return;
        }
        return formatLine(line)
    });
    s.on('error', function(e){
        console.log('error:', e);
        process.exit(1);
    });
}

main();
