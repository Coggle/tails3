#!/usr/bin/env node

var nopt = require('nopt');
var tails3 = require('../lib/tails3')
var colors = require('colors');
var strftime = require('strftime');

function asUTC(d){
    return new Date(
        d.getUTCFullYear(),
        d.getUTCMonth(),
        d.getUTCDate(),
        d.getUTCHours(),
        d.getUTCMinutes(),
        d.getUTCSeconds()
    );
}

function lengthlimit(line, length){
    length = length || 160;
    if(line.length > length-3)
        line = line.substr(0, length-3) + '...';
    return line;
}

function applyColor(color, line){
    return line[color];
}

function printLine(color, isdebug, ts, line){
    var stack   = line.stack;
    var host    = line.hostname;
    var level   = line.level;
    var message = line.message;

    if(message) message = lengthlimit(line.message);
    if(stack) stack = stack.replace(/\\n/g, '\n');

    ts = strftime("%Y/%m/%d %H:%M:%S.%L", ts);
    
    if(typeof color === 'undefined'){
        console.log(applyColor('bold', '[' + ts +' '+ level +' '+ host + '] ') + message);
    }else if(isdebug){
        console.log(applyColor('bold', '[' + ts +' '+ level +' '+ host + '] ') + applyColor('grey', message));
    }else{
        console.log(applyColor(color, applyColor('bold', '[' + ts +' '+ level +' '+ host + '] ') + message));
    }
    if(stack)
        console.log(stack[color]);
}
function formatLine(line){
    var ts = new Date(line.timestamp);
    var ts_as_utc = asUTC(ts);
    var ts_as_utc_strffed = tails3.bucketDateFormat(ts_as_utc)
    var level = line.level;
    
    if(level == 'critical'){
        printLine('magenta', false, ts, line);
    }else if(level == 'error'){
        printLine('red', false, ts, line);
    }else if(level == 'warn'){
        printLine('yellow', false, ts, line);
    }else if(level == 'debug'){
        printLine(undefined, true, ts, line);
    }else{
        printLine(undefined, false, ts, line);
    }
}


function main(){
    process.title = 'tails3';

    var opts = {
        "bucket":String,
        "stage":String,
        "since":String
    };
    var shorthands = {
        "b": ["--bucket"]
    };
    var parsed = nopt(opts, shorthands);

    if(!parsed.bucket)
        throw new Error('--bucket is required');
    if(parsed.since && parsed.since.split('-').length != 5)
        throw new Error('--since must be of the form YYYY-mm-DD-HH-MM');

    var one_hour_ago_as_utc = asUTC(tails3.oneHourAgo());
    var one_hour_ago_strffed = tails3.bucketDateFormat(one_hour_ago_as_utc);

    var stage  = parsed.stage || 'production';
    var bucket = parsed.bucket;
    var since  = parsed.since || one_hour_ago_strffed;
    
    var sp = since.split("-");
    var since = new Date(sp[0], sp[1]-1, sp[2], sp[3], sp[4]);

    var s = new tails3.BucketDataStream(bucket, since, stage);
    
    s.on('line', formatLine);
    s.on('error', function(e){
        console.log('error:', e);
        process.exit(1);
    });
}

main();
